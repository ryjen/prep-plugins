#!/usr/bin/env bash

PLUGIN_PATH="$(dirname "${BASH_SOURCE[0]}")"

PLUGIN_NAME="$(basename $PLUGIN_PATH)"

SUPPORT_PATH="${PLUGIN_PATH/$PLUGIN_NAME/support}"

SUPPORT_PLUGIN="${SUPPORT_PATH}/plugin"

source $SUPPORT_PLUGIN

function is_uri_scheme() {
  [[ $1 = *"://"* ]]
}

extract () {
  if [ ! -f "$1" ] ; then
    echo "'$1' does not exist."
    return 1
  fi

  if [ ! -d "$2" ] ; then
    echo "Invalid output folder '$2'"
    return 1
  fi

  case "$1" in
    *.tar.bz2)   tar xvjf "$1" -C "$2"   ;;
    *.tar.xz)    tar xvJf "$1" -C "$2"   ;;
    *.tar.gz)    tar xvzf "$1" -C "$2"   ;;
    *.bz2)       bunzip2 "$1"    ;;
    *.rar)       rar xw "$2" "$1"     ;;
    *.gz)        gunzip "$1"     ;;
    *.tar)       tar xvf "$1" -C "$2"   ;;
    *.tbz2)      tar xvjf "$1" -C "$2"   ;;
    *.tgz)       tar xvzf "$1" -C "$2"   ;;
    *.zip)       unzip "$1" -d "$2"     ;;
    *.Z)         uncompress "$1" ;;
    *.xz)        xz -d "$1"      ;;
    *.7z)        7z x "$1" -o "$2"      ;;
    *.a)         ar x "$1"       ;;
    *)           echo "Unable to extract '$1'." ;;
  esac
}

function plugin_archive_load() {

  eval "grater --version" > /dev/null

  if [[ $? -ne 0 ]]; then
    return $ERROR_NOT_FOUND
  fi

  return 0
}

function plugin_archive_download() {

  local temp_dir=$1

  local url=$2

  local archive_file=$(basename $url)

  curl -o "$temp_dir/$archive_file" $url
}

function plugin_archive_resolve() {
  local input=$(plugin_read_resolver)

  eval "declare -A params"=${input#*=}

  local temp_dir=$(mktemp -d)

  local archive_file=${params[Location]}

  if [ -z "${archive_file}" ]; then
    return 1
  fi

  local archive_name=$(basename ${archive_file})

  if is_uri_scheme $archive_file; then
    plugin_archive_download ${temp_dir} ${archive_file}

    if [[ $? -ne 0 ]]; then
      plugin_error "Unable to download $archive_file"
      return -1
    fi

    archive_file="$temp_dir/$archive_name"
  elif [ ! -f ${archive_file} ]; then
    plugin_error "Archive location is not a url or a file (${params[Location]})"
    return -1
  fi

  extract "$archive_file" "${params[Path]}"

  local status=$? 

  if [[ $status -ne 0 ]]; then
    plugin_error "Unable to extract $archive_file"
    return $status
  fi

  plugin_return "${params[Path]}"
}


declare -A plugin=(
[OnLoad]=plugin_archive_load
[OnResolve]=plugin_archive_resolve
)

plugin_execute "$(declare -p plugin)"


